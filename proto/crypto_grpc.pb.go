// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/crypto.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoClient interface {
	GetAllAsset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllAssetResp, error)
	GetAsset(ctx context.Context, in *GetAssetReq, opts ...grpc.CallOption) (*GetAssetResp, error)
	GetRecentTrades(ctx context.Context, in *RecentTradesReq, opts ...grpc.CallOption) (*RecentTradesMultiple, error)
	AddRecentTrade(ctx context.Context, in *AddRecentTradeReqMulti, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCurrentQuote(ctx context.Context, in *GetQuoteReq, opts ...grpc.CallOption) (*QuoteResp, error)
	UpdateQuotes(ctx context.Context, in *UpdateQuoteReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cryptoClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoClient(cc grpc.ClientConnInterface) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) GetAllAsset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllAssetResp, error) {
	out := new(GetAllAssetResp)
	err := c.cc.Invoke(ctx, "/com.server.protos.Crypto/getAllAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) GetAsset(ctx context.Context, in *GetAssetReq, opts ...grpc.CallOption) (*GetAssetResp, error) {
	out := new(GetAssetResp)
	err := c.cc.Invoke(ctx, "/com.server.protos.Crypto/getAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) GetRecentTrades(ctx context.Context, in *RecentTradesReq, opts ...grpc.CallOption) (*RecentTradesMultiple, error) {
	out := new(RecentTradesMultiple)
	err := c.cc.Invoke(ctx, "/com.server.protos.Crypto/getRecentTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) AddRecentTrade(ctx context.Context, in *AddRecentTradeReqMulti, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.server.protos.Crypto/addRecentTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) GetCurrentQuote(ctx context.Context, in *GetQuoteReq, opts ...grpc.CallOption) (*QuoteResp, error) {
	out := new(QuoteResp)
	err := c.cc.Invoke(ctx, "/com.server.protos.Crypto/getCurrentQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoClient) UpdateQuotes(ctx context.Context, in *UpdateQuoteReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.server.protos.Crypto/updateQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
// All implementations must embed UnimplementedCryptoServer
// for forward compatibility
type CryptoServer interface {
	GetAllAsset(context.Context, *empty.Empty) (*GetAllAssetResp, error)
	GetAsset(context.Context, *GetAssetReq) (*GetAssetResp, error)
	GetRecentTrades(context.Context, *RecentTradesReq) (*RecentTradesMultiple, error)
	AddRecentTrade(context.Context, *AddRecentTradeReqMulti) (*empty.Empty, error)
	GetCurrentQuote(context.Context, *GetQuoteReq) (*QuoteResp, error)
	UpdateQuotes(context.Context, *UpdateQuoteReq) (*empty.Empty, error)
	mustEmbedUnimplementedCryptoServer()
}

// UnimplementedCryptoServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoServer struct {
}

func (UnimplementedCryptoServer) GetAllAsset(context.Context, *empty.Empty) (*GetAllAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAsset not implemented")
}
func (UnimplementedCryptoServer) GetAsset(context.Context, *GetAssetReq) (*GetAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedCryptoServer) GetRecentTrades(context.Context, *RecentTradesReq) (*RecentTradesMultiple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentTrades not implemented")
}
func (UnimplementedCryptoServer) AddRecentTrade(context.Context, *AddRecentTradeReqMulti) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecentTrade not implemented")
}
func (UnimplementedCryptoServer) GetCurrentQuote(context.Context, *GetQuoteReq) (*QuoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentQuote not implemented")
}
func (UnimplementedCryptoServer) UpdateQuotes(context.Context, *UpdateQuoteReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuotes not implemented")
}
func (UnimplementedCryptoServer) mustEmbedUnimplementedCryptoServer() {}

// UnsafeCryptoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoServer will
// result in compilation errors.
type UnsafeCryptoServer interface {
	mustEmbedUnimplementedCryptoServer()
}

func RegisterCryptoServer(s grpc.ServiceRegistrar, srv CryptoServer) {
	s.RegisterService(&Crypto_ServiceDesc, srv)
}

func _Crypto_GetAllAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetAllAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.server.protos.Crypto/getAllAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetAllAsset(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.server.protos.Crypto/getAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetAsset(ctx, req.(*GetAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_GetRecentTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentTradesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetRecentTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.server.protos.Crypto/getRecentTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetRecentTrades(ctx, req.(*RecentTradesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_AddRecentTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecentTradeReqMulti)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).AddRecentTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.server.protos.Crypto/addRecentTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).AddRecentTrade(ctx, req.(*AddRecentTradeReqMulti))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_GetCurrentQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).GetCurrentQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.server.protos.Crypto/getCurrentQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).GetCurrentQuote(ctx, req.(*GetQuoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crypto_UpdateQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).UpdateQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.server.protos.Crypto/updateQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).UpdateQuotes(ctx, req.(*UpdateQuoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Crypto_ServiceDesc is the grpc.ServiceDesc for Crypto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crypto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.server.protos.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAllAsset",
			Handler:    _Crypto_GetAllAsset_Handler,
		},
		{
			MethodName: "getAsset",
			Handler:    _Crypto_GetAsset_Handler,
		},
		{
			MethodName: "getRecentTrades",
			Handler:    _Crypto_GetRecentTrades_Handler,
		},
		{
			MethodName: "addRecentTrade",
			Handler:    _Crypto_AddRecentTrade_Handler,
		},
		{
			MethodName: "getCurrentQuote",
			Handler:    _Crypto_GetCurrentQuote_Handler,
		},
		{
			MethodName: "updateQuotes",
			Handler:    _Crypto_UpdateQuotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/crypto.proto",
}
